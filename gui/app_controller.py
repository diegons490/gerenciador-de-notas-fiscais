# gui/app_controller.py
"""
Main application controller using ttkbootstrap.
Manages navigation between views and coordinates application logic.
"""

import tkinter as tk
import ttkbootstrap as ttk
from ttkbootstrap.constants import *
from .modules.main_menu import MainMenu
from .modules.invoice_export import InvoiceExport
from .modules.invoice_delete import InvoiceDelete
from .modules.report import Report
from .modules.backup import ConfigBackup
from .modules.theme import ConfigTheme
from .modules.customer_registration import CustomerRegistration
from .keys import EventKeys

class AppController:
    """
    Main controller that manages navigation between different views
    and coordinates communication between models and views.
    """

    def __init__(self, root, theme_manager, database):
        """
        Initializes main controller.
        """
        self.root = root
        self.theme_manager = theme_manager
        self.database = database
        self.current_view = None

        # Configure close protocol
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)

    def on_close(self):
        """Method called when application is closing."""
        # Save window state
        self.theme_manager.save_window_state(self.root)
        # Close application
        self.root.destroy()

    def _switch_view(self, view_class, *args, **kwargs):
        """
        Switches to a new view.
        """
        # Remove current view
        if self.current_view:
            self.current_view.destroy()

        # Create new view
        self.current_view = view_class(
            self.root, self, self.theme_manager, self.database, *args, **kwargs
        )

        # Use fixed padding (10px) instead of LayoutConfig
        self.current_view.pack(
            fill=BOTH,
            expand=True,
            padx=10,
            pady=10,
        )

    def show_main_menu(self):
        """Shows main menu view."""
        self._switch_view(MainMenu)

    def show_customer_registration(self):
        """Shows customer registration view."""
        self._switch_view(CustomerRegistration)

    def show_report(self):
        """Shows report view."""
        self._switch_view(Report)

    def show_backup(self):
        """Shows backup view."""
        self._switch_view(ConfigBackup)

    def show_theme(self):
        """Shows theme configuration view."""
        self._switch_view(ConfigTheme)

    def handle_event(self, event, data=None):
        """
        Processes events generated by views.
        """
        if event == EventKeys.BACK:
            self.show_main_menu()
        elif event == EventKeys.EXIT:
            # SAVE STATE BEFORE EXITING
            self.theme_manager.save_window_state(self.root)
            self.root.quit()
        elif event == EventKeys.CUSTOMER_REGISTRATION:
            self.show_customer_registration()
        elif event == EventKeys.REPORT:
            self.show_report()
        elif event == EventKeys.BACKUPS:
            # Backup now handled as modal dialog in main_menu
            pass
        elif event == EventKeys.THEME:
            self.show_theme()

    def refresh_current_view(self):
        """Requests current view to refresh its data."""
        if self.current_view and hasattr(self.current_view, "refresh_data"):
            self.current_view.refresh_data()